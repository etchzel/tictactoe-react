{"version":3,"sources":["components/Board.jsx","components/Settings.jsx","modules/player.js","modules/aiController.js","modules/controller.js","components/App.jsx","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","toString","boardRow","row","j","push","Settings","useState","gameMode","signMode","playerSign","state","setState","modeSelectHandler","mode","newState","signSelectHandler","handleChange","states","onChange","Player","sign","this","_sign","AIController","humanPlayerSign","aiPlayerSign","setCurrentPlayerSign","Controller","getHumanPlayer","getAIPlayer","minimax","availableMove","filter","cell","isNaN","checkWin","score","length","bestMove","moves","forEach","spot","move","index","result","bestScore","_playerA","_playerB","getSign","winner","some","line","winCond","every","checkDraw","moveStep","idx","history","slice","stepNumber","xIsNext","concat","moveIndex","aiStep","indexedSquares","map","s","undefined","getEmptySquares","App","Array","fill","moveHandler","bind","restartHandler","updateState","aiMove","Object","assign","console","log","status","current","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42497459.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.jsx.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"cell\" onClick={() => props.onClick()}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nfunction Board(props) {\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        key={`cell-${i.toString()}`}\r\n        value={props.squares[i]} \r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  \r\n  let boardRow = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let row = [];\r\n    for (let j = i * 3; j < i * 3 + 3; j++) {\r\n      row.push(renderSquare(j));\r\n    }\r\n    boardRow.push(\r\n      <div className=\"board-row\" key={`row-${i}`}>\r\n        {row}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {boardRow}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from 'react';\r\nimport \"./Settings.jsx.css\"\r\n\r\nfunction Settings(props) {\r\n  const [state, setState] = useState({\r\n    gameMode: props.gameMode,\r\n    signMode: (props.playerSign === 'X' ? 1 : 0),\r\n  });\r\n\r\n  const modeSelectHandler = (mode) => {\r\n    const newState = {\r\n      gameMode: mode,\r\n      signMode: (mode ? 1 : state.signMode)\r\n    };\r\n    setState(newState);\r\n    return newState;\r\n  };\r\n\r\n  const signSelectHandler = (mode) => {\r\n    const newState = {signMode: mode};\r\n    setState(newState);\r\n    return newState;\r\n  };\r\n\r\n  const handleChange = (states) => {\r\n    props.onChange(\r\n      states.gameMode,\r\n      (states.signMode ? 'X' : 'O')\r\n    )\r\n  };\r\n  \r\n  return (\r\n    <div className=\"settings\">\r\n      <h2 className=\"message game-mode\">Pick game mode:</h2>\r\n      <div className=\"game-mode-select\">\r\n        <button \r\n          className={\r\n            `btn vs-human ${state.gameMode ? \"active\" : \"\"}`\r\n          }\r\n          onClick={() => handleChange(modeSelectHandler(1))}\r\n        >\r\n          Vs. Human\r\n        </button>\r\n        <button \r\n          className={\r\n            `btn vs-ai ${state.gameMode ? \"\" : \"active\"}`\r\n          }\r\n          onClick={() => handleChange(modeSelectHandler(0))}\r\n        >\r\n          Vs. AI\r\n        </button>\r\n      </div>\r\n      <div className={\r\n        `ai-mode-settings ${state.gameMode ? \"hidden\" : \"\"}`\r\n        }\r\n      >\r\n        <h2 className=\"message pick-sign\">Choose sign:</h2>\r\n        <div className=\"sign-select\">\r\n          <button \r\n            className={\r\n              `btn sign-x ${state.signMode ? \"active\" : \"\"}`\r\n            }\r\n            onClick={() => handleChange(signSelectHandler(1))}\r\n          >\r\n            X\r\n          </button>\r\n          <button \r\n            className={\r\n              `btn sign-o ${state.signMode ? \"\" : \"active\"}`\r\n            }\r\n            onClick={() => handleChange(signSelectHandler(0))}\r\n          >\r\n            O\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Settings;\r\n","class Player {\r\n  constructor(sign) {\r\n    this._sign = sign;\r\n  }\r\n\r\n  get getSign() {\r\n    return this._sign;\r\n  }\r\n\r\n  set setSign(sign) {\r\n    this._sign = sign;\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import Controller from \"./controller\";\r\n\r\nconst AIController = (() => {\r\n  let humanPlayerSign = 'X';\r\n  let aiPlayerSign = 'O';\r\n\r\n  const setCurrentPlayerSign = (sign) => {\r\n    humanPlayerSign = Controller.getHumanPlayer(sign);\r\n    aiPlayerSign = Controller.getAIPlayer(sign);\r\n  };\r\n\r\n  const minimax = (squares, playerSign) => {\r\n    \r\n    const availableMove = squares.filter(cell => !isNaN(cell));\r\n\r\n    if (Controller.checkWin(squares)) {\r\n\r\n      if (playerSign === humanPlayerSign) {\r\n        return {score: 10};\r\n      } else if (playerSign === aiPlayerSign) {\r\n        return {score: -10}; \r\n      };\r\n\r\n    } else if (availableMove.length === 0) {\r\n\r\n      return {score: 0};\r\n\r\n    };\r\n\r\n    let moves = [];\r\n    availableMove.forEach((spot) => {\r\n      let move = {};\r\n      move.index = spot;\r\n\r\n      squares[spot] = playerSign;\r\n\r\n      if (playerSign === aiPlayerSign) {\r\n        const result = minimax(squares, humanPlayerSign);\r\n        move.score = result.score;\r\n      } else {\r\n        const result = minimax(squares, aiPlayerSign);\r\n        move.score = result.score;\r\n      };\r\n\r\n      squares[spot] = move.index;\r\n      moves.push(move);\r\n    });\r\n\r\n    let bestMove;\r\n    if (playerSign === aiPlayerSign) {\r\n      let bestScore = -10000;\r\n      moves.forEach((move, index) => {\r\n        if (move.score > bestScore) {\r\n            bestScore = move.score;\r\n            bestMove = index;\r\n        };\r\n      });\r\n    } else {\r\n      let bestScore = 10000;\r\n      moves.forEach((move, index) => {\r\n        if (move.score < bestScore) {\r\n            bestScore = move.score;\r\n            bestMove = index;\r\n        };\r\n      });\r\n    };\r\n\r\n    return moves[bestMove];\r\n  };\r\n\r\n  return {\r\n    setCurrentPlayerSign,\r\n    minimax,\r\n  };\r\n\r\n})();\r\n\r\nexport default AIController;","import Player from \"./player\";\r\nimport AIController from \"./aiController\";\r\n\r\nconst Controller = (() => {\r\n  let _playerA = new Player('X');\r\n  let _playerB = new Player('O');\r\n\r\n  const _currentTurn = (gameState) => {\r\n    return gameState ? _playerA.getSign : _playerB.getSign;\r\n  };\r\n\r\n  const getHumanPlayer = (playerSign) => {\r\n    return (playerSign === 'X' ? _playerA.getSign : _playerB.getSign);\r\n  };\r\n\r\n  const getAIPlayer = (playerSign) => {\r\n    return (playerSign === 'X' ? _playerB.getSign : _playerA.getSign);\r\n  };\r\n\r\n  const checkWin = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n  \r\n    let winner = null;\r\n    lines.some((line) => {\r\n        const winCond = (\r\n          line.every(i => squares[i] === 'X') ||\r\n          line.every(i => squares[i] === 'O')\r\n        );\r\n  \r\n        if (winCond) winner = squares[line[0]];\r\n        return winCond;\r\n    });\r\n    return winner;\r\n  };\r\n\r\n  const checkDraw = (squares) => {\r\n    if (squares.some(cell => cell === null)) return false;\r\n    return true;\r\n  };\r\n\r\n  const moveStep = (state, idx) => {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (checkWin(squares) || squares[idx]) return false;\r\n    if (checkDraw(squares)) return false;\r\n\r\n    squares[idx] = _currentTurn(state.xIsNext);\r\n    const newState = {\r\n      history: history.concat([{\r\n        squares: squares,\r\n        moveIndex: idx,\r\n      }]),\r\n      stepNumber: history.length,\r\n      gameMode: state.gameMode,\r\n      playerSign: state.playerSign,\r\n      xIsNext: !state.xIsNext,\r\n    };\r\n\r\n    return newState;\r\n  };\r\n\r\n  const aiStep = (state) => {\r\n    if (state.xIsNext && state.playerSign === 'X') return;\r\n    const squares = state.history[state.history.length - 1].squares.slice();\r\n    const indexedSquares = squares.map((s, i) => {\r\n      if (s === null) s = i;\r\n      return s;\r\n    });\r\n\r\n    AIController.setCurrentPlayerSign(state.playerSign);\r\n    const moveIndex = AIController.minimax(\r\n      indexedSquares, getAIPlayer(state.playerSign)\r\n    ).index;\r\n\r\n    if (moveIndex === undefined) return;\r\n    const move = moveStep(state, moveIndex);\r\n    return move;\r\n  };\r\n\r\n  const getEmptySquares = (squares) => {\r\n    return squares.filter(s => s === null);\r\n  };\r\n\r\n  return {\r\n    checkWin,\r\n    checkDraw,\r\n    moveStep,\r\n    aiStep,\r\n    getEmptySquares,\r\n    getHumanPlayer,\r\n    getAIPlayer,\r\n  };\r\n\r\n})();\r\n\r\nexport default Controller;\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport Settings from './Settings';\r\nimport Controller from '../modules/controller';\r\nimport \"./App.jsx.css\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        moveIndex: 0,\r\n      }],\r\n      stepNumber: 0,\r\n      gameMode: 1,\r\n      playerSign: 'X',\r\n      xIsNext: true,\r\n    };\r\n\r\n    this.moveHandler = this.moveHandler.bind(this);\r\n    this.restartHandler = this.restartHandler.bind(this);\r\n    this.updateState = this.updateState.bind(this);\r\n  }\r\n\r\n  moveHandler(i) {\r\n    if (!this.state.xIsNext && \r\n        !this.state.gameMode &&\r\n        !this.state.playerSign === 'X') {\r\n      console.log(this.state);\r\n      return;\r\n    }\r\n\r\n    let newState = Controller.moveStep(this.state, i);\r\n    if (!newState) return;\r\n\r\n    if (!this.state.gameMode) {\r\n      const aiMove = Controller.aiStep(newState);\r\n      if (aiMove) Object.assign(newState, {...aiMove});\r\n    };\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  updateState(mode, sign) {\r\n    const newState = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        moveIndex: 0,\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      gameMode: mode,\r\n      playerSign: sign\r\n    };\r\n\r\n    if (!mode && sign === 'O') {\r\n      const aiMove = Controller.aiStep(newState);\r\n      Object.assign(newState, {...aiMove});\r\n    };\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  restartHandler() {\r\n    this.updateState(this.state.gameMode, this.state.playerSign);\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = Controller.checkWin(current.squares);\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = `Winner: ${winner}`;\r\n    } else if (Controller.checkDraw(current.squares)) {\r\n      status = `Draw`;\r\n    } else {\r\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <Settings\r\n          gameMode={this.state.gameMode}\r\n          playerSign={this.state.playerSign}\r\n          onChange={this.updateState}\r\n        />\r\n        <div className=\"main-container\">\r\n          <div className=\"game-info\">\r\n            <div className=\"message current-mode\">Current Mode: Vs. {this.state.gameMode ? \"Human\" : \"AI\"}</div>\r\n            <div className=\"message game-message\">{status}</div>\r\n          </div>\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick={(i) => this.moveHandler(i)}\r\n            />\r\n          </div>\r\n          <div className=\"options\">\r\n            <button \r\n              className=\"btn restart-btn\"\r\n              onClick={() => this.restartHandler()}\r\n            >\r\n              Restart\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}