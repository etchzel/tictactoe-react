{"version":3,"sources":["components/Board.jsx","components/Settings.jsx","modules/player.js","modules/aiController.js","modules/controller.js","components/App.jsx","index.js"],"names":["Square","props","win","className","onWin","onClick","value","Board","renderSquare","i","squares","some","c","toString","boardRow","row","j","push","Settings","useState","gameMode","signMode","playerSign","state","setState","modeSelectHandler","mode","newState","signSelectHandler","handleChange","states","onChange","Player","sign","this","_sign","AIController","humanPlayerSign","aiPlayerSign","setCurrentPlayerSign","Controller","getHumanPlayer","getAIPlayer","minimax","availableMove","filter","cell","isNaN","checkWin","score","length","bestMove","moves","forEach","spot","move","index","result","bestScore","_playerA","_playerB","getSign","winner","line","winCond","every","checkDraw","moveStep","idx","history","slice","stepNumber","xIsNext","concat","moveIndex","aiStep","indexedSquares","map","s","undefined","getEmptySquares","App","Array","fill","moveHandler","bind","restartHandler","updateState","aiMove","Object","assign","console","log","status","current","winningLine","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sSAGA,SAASA,EAAOC,GACd,IAAsBC,EAKtB,OACE,wBACEC,UAAS,gBAPSD,EAOcD,EAAMG,MANpCF,EAAY,MACT,KAMLG,QAAS,kBAAMJ,EAAMI,WAFvB,SAIGJ,EAAMK,QAsCEC,MAjCf,SAAeN,GAcb,IAZA,IAAMO,EAAe,SAACC,GACpB,OACE,cAACT,EAAD,CAEEM,MAAOL,EAAMS,QAAQD,GACrBJ,QAAS,kBAAMJ,EAAMI,QAAQI,IAC7BL,MAAOH,EAAMG,MAAQH,EAAMG,MAAMO,MAAK,SAAAC,GAAC,OAAIA,IAAMH,KAAK,MAJxD,eACeA,EAAEI,cAQjBC,EAAW,GACNL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIM,EAAM,GACDC,EAAQ,EAAJP,EAAOO,EAAQ,EAAJP,EAAQ,EAAGO,IACjCD,EAAIE,KAAKT,EAAaQ,IAExBF,EAASG,KACP,qBAAKd,UAAU,YAAf,SACGY,GADH,cAAuCN,KAM3C,OACE,qBAAKN,UAAU,QAAf,SACGW,K,aCkCQI,MA9Ef,SAAkBjB,GAChB,MAA0BkB,mBAAS,CACjCC,SAAUnB,EAAMmB,SAChBC,SAAgC,MAArBpB,EAAMqB,WAAqB,EAAI,IAF5C,mBAAOC,EAAP,KAAcC,EAAd,KAKMC,EAAoB,SAACC,GACzB,IAAMC,EAAW,CACfP,SAAUM,EACVL,SAAWK,EAAO,EAAIH,EAAMF,UAG9B,OADAG,EAASG,GACFA,GAGHC,EAAoB,SAACF,GACzB,IAAMC,EAAW,CAACN,SAAUK,GAE5B,OADAF,EAASG,GACFA,GAGHE,EAAe,SAACC,GACpB7B,EAAM8B,SACJD,EAAOV,SACNU,EAAOT,SAAW,IAAM,MAI7B,OACE,sBAAKlB,UAAU,WAAf,UACE,oBAAIA,UAAU,oBAAd,6BACA,sBAAKA,UAAU,mBAAf,UACE,wBACEA,UAAS,uBACSoB,EAAMH,SAAW,SAAW,IAE9Cf,QAAS,kBAAMwB,EAAaJ,EAAkB,KAJhD,uBAQA,wBACEtB,UAAS,oBACMoB,EAAMH,SAAW,GAAK,UAErCf,QAAS,kBAAMwB,EAAaJ,EAAkB,KAJhD,uBASF,sBAAKtB,UAAS,2BACQoB,EAAMH,SAAW,SAAW,IADlD,UAIE,oBAAIjB,UAAU,oBAAd,0BACA,sBAAKA,UAAU,cAAf,UACE,wBACEA,UAAS,qBACOoB,EAAMF,SAAW,SAAW,IAE5ChB,QAAS,kBAAMwB,EAAaD,EAAkB,KAJhD,eAQA,wBACEzB,UAAS,qBACOoB,EAAMF,SAAW,GAAK,UAEtChB,QAAS,kBAAMwB,EAAaD,EAAkB,KAJhD,yBCpDKI,E,WAbb,WAAYC,GAAO,oBACjBC,KAAKC,MAAQF,E,yCAGf,WACE,OAAOC,KAAKC,Q,mBAGd,SAAYF,GACVC,KAAKC,MAAQF,M,KCmEFG,EA3EO,WACpB,IAAIC,EAAkB,IAClBC,EAAe,IAkEnB,MAAO,CACLC,qBAjE2B,SAACN,GAC5BI,EAAkBG,EAAWC,eAAeR,GAC5CK,EAAeE,EAAWE,YAAYT,IAgEtCU,QA7Dc,SAAVA,EAAWjC,EAASY,GAExB,IAAMsB,EAAgBlC,EAAQmC,QAAO,SAAAC,GAAI,OAAKC,MAAMD,MAEpD,GAAIN,EAAWQ,SAAStC,GAAU,CAEhC,GAAIY,IAAee,EACjB,MAAO,CAACY,MAAO,IACV,GAAI3B,IAAegB,EACxB,MAAO,CAACW,OAAQ,SAGb,GAA6B,IAAzBL,EAAcM,OAEvB,MAAO,CAACD,MAAO,GAIjB,IAmBIE,EAnBAC,EAAQ,GAoBZ,GAnBAR,EAAcS,SAAQ,SAACC,GACrB,IAAIC,EAAO,GAKX,GAJAA,EAAKC,MAAQF,EAEb5C,EAAQ4C,GAAQhC,EAEZA,IAAegB,EAAc,CAC/B,IAAMmB,EAASd,EAAQjC,EAAS2B,GAChCkB,EAAKN,MAAQQ,EAAOR,UACf,CACL,IAAMQ,EAASd,EAAQjC,EAAS4B,GAChCiB,EAAKN,MAAQQ,EAAOR,MAGtBvC,EAAQ4C,GAAQC,EAAKC,MACrBJ,EAAMnC,KAAKsC,MAITjC,IAAegB,EAAc,CAC/B,IAAIoB,GAAa,IACjBN,EAAMC,SAAQ,SAACE,EAAMC,GACfD,EAAKN,MAAQS,IACbA,EAAYH,EAAKN,MACjBE,EAAWK,UAGZ,CACL,IAAIE,EAAY,IAChBN,EAAMC,SAAQ,SAACE,EAAMC,GACfD,EAAKN,MAAQS,IACbA,EAAYH,EAAKN,MACjBE,EAAWK,MAKnB,OAAOJ,EAAMD,KAjEK,GCwGPX,EAvGK,WAClB,IAAImB,EAAW,IAAI3B,EAAO,KACtB4B,EAAW,IAAI5B,EAAO,KAUpBU,EAAc,SAACpB,GACnB,MAAuB,MAAfA,EAAqBsC,EAASC,QAAUF,EAASE,SAGrDb,EAAW,SAACtC,GAChB,IAWIoD,EAAS,KAUb,MArBc,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIHnD,MAAK,SAACoD,GACR,IAAMC,EACJD,EAAKE,OAAM,SAAAxD,GAAC,MAAmB,MAAfC,EAAQD,OACxBsD,EAAKE,OAAM,SAAAxD,GAAC,MAAmB,MAAfC,EAAQD,MAI1B,OADIuD,IAASF,EAASC,GACfC,KAEJF,GAGHI,EAAY,SAACxD,GACjB,OAAIA,EAAQC,MAAK,SAAAmC,GAAI,OAAa,OAATA,MAIrBqB,EAAW,SAAC5C,EAAO6C,GACvB,IAAMC,EAAU9C,EAAM8C,QAAQC,MAAM,EAAG/C,EAAMgD,WAAa,GAEpD7D,EADU2D,EAAQA,EAAQnB,OAAS,GACjBxC,QAAQ4D,QAEhC,OAAItB,EAAStC,KAAYA,EAAQ0D,MAC7BF,EAAUxD,KAEdA,EAAQ0D,GAAoB7C,EAAMiD,QAjDfb,EAASE,QAAUD,EAASC,QAkD9B,CACfQ,QAASA,EAAQI,OAAO,CAAC,CACvB/D,QAASA,EACTgE,UAAWN,KAEbG,WAAYF,EAAQnB,OACpB9B,SAAUG,EAAMH,SAChBE,WAAYC,EAAMD,WAClBkD,SAAUjD,EAAMiD,YA4BpB,MAAO,CACLxB,WACAkB,YACAC,WACAQ,OA1Ba,SAACpD,GACd,IAAIA,EAAMiD,SAAgC,MAArBjD,EAAMD,WAA3B,CACA,IACMsD,EADUrD,EAAM8C,QAAQ9C,EAAM8C,QAAQnB,OAAS,GAAGxC,QAAQ4D,QACjCO,KAAI,SAACC,EAAGrE,GAErC,OADU,OAANqE,IAAYA,EAAIrE,GACbqE,KAGT1C,EAAaG,qBAAqBhB,EAAMD,YACxC,IAAMoD,EAAYtC,EAAaO,QAC7BiC,EAAgBlC,EAAYnB,EAAMD,aAClCkC,MAEF,QAAkBuB,IAAdL,EAEJ,OADaP,EAAS5C,EAAOmD,KAa7BM,gBATsB,SAACtE,GACvB,OAAOA,EAAQmC,QAAO,SAAAiC,GAAC,OAAU,OAANA,MAS3BrC,eAzFqB,SAACnB,GACtB,MAAuB,MAAfA,EAAqBqC,EAASE,QAAUD,EAASC,SAyFzDnB,eAlGgB,GCsHLuC,G,wDAlHb,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACX8C,QAAS,CAAC,CACR3D,QAASwE,MAAM,GAAGC,KAAK,MACvBT,UAAW,IAEbH,WAAY,EACZnD,SAAU,EACVE,WAAY,IACZkD,SAAS,GAGX,EAAKY,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAfF,E,+CAkBnB,SAAY5E,GACV,GAAKyB,KAAKX,MAAMiD,SACXtC,KAAKX,MAAMH,UACe,OAA1Bc,KAAKX,MAAMD,WAFhB,CAOA,IAAIK,EAAWa,EAAW2B,SAASjC,KAAKX,MAAOd,GAC/C,GAAKkB,EAAL,CAEA,IAAKO,KAAKX,MAAMH,SAAU,CACxB,IAAMoE,EAAShD,EAAWmC,OAAOhD,GAC7B6D,GAAQC,OAAOC,OAAO/D,EAAd8D,OAAA,IAAAA,CAAA,GAA4BD,IAG1CtD,KAAKV,SAASG,SAZZgE,QAAQC,IAAI1D,KAAKX,S,yBAerB,SAAYG,EAAMO,GAChB,IAAMN,EAAW,CACf0C,QAAS,CAAC,CACR3D,QAASwE,MAAM,GAAGC,KAAK,MACvBT,UAAW,IAEbH,WAAY,EACZC,SAAS,EACTpD,SAAUM,EACVJ,WAAYW,GAGd,IAAKP,GAAiB,MAATO,EAAc,CACzB,IAAMuD,EAAShD,EAAWmC,OAAOhD,GACjC8D,OAAOC,OAAO/D,EAAd8D,OAAA,IAAAA,CAAA,GAA4BD,IAG9BtD,KAAKV,SAASG,K,4BAGhB,WACEO,KAAKqD,YAAYrD,KAAKX,MAAMH,SAAUc,KAAKX,MAAMD,c,oBAGnD,WAAU,IAKJuE,EALG,OAEDC,EADU5D,KAAKX,MAAM8C,QACHnC,KAAKX,MAAMgD,YAC7BwB,EAAcvD,EAAWQ,SAAS8C,EAAQpF,SAGhD,GAAIqF,EAAa,CACf,IAAMjC,EAASgC,EAAQpF,QAAQqF,EAAY,IAC3CF,EAAM,kBAEF3D,KAAKX,MAAMH,SACX0C,EAAUA,IAAW5B,KAAKX,MAAMD,WAAa,SAAW,WAI5DuE,EADSrD,EAAW0B,UAAU4B,EAAQpF,SAChC,OAEA,uBAAmBwB,KAAKX,MAAMiD,QAAU,IAAM,KAGtD,OACE,sBAAKrE,UAAU,OAAf,UACE,cAAC,EAAD,CACEiB,SAAUc,KAAKX,MAAMH,SACrBE,WAAYY,KAAKX,MAAMD,WACvBS,SAAUG,KAAKqD,cAEjB,sBAAKpF,UAAU,iBAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,uBAAf,+BAAyD+B,KAAKX,MAAMH,SAAW,QAAU,QACzF,qBAAKjB,UAAU,uBAAf,SAAuC0F,OAEzC,qBAAK1F,UAAU,aAAf,SACE,cAAC,EAAD,CACEO,QAASoF,EAAQpF,QACjBL,QAAS,SAACI,GAAD,OAAO,EAAK2E,YAAY3E,IACjCL,MAAO2F,GAA4B,SAGvC,qBAAK5F,UAAU,UAAf,SACE,wBACEA,UAAU,kBACVE,QAAS,kBAAM,EAAKiF,kBAFtB,iC,GAtGMU,IAAMC,YCCxBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d80c5470.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.jsx.css';\r\n\r\nfunction Square(props) {\r\n  const highlightWin = (win) => {\r\n    if (win) return \"win\";\r\n    return \"\";\r\n  }\r\n\r\n  return (\r\n    <button \r\n      className={`cell ${highlightWin(props.onWin)}`} \r\n      onClick={() => props.onClick()}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nfunction Board(props) {\r\n\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        key={`cell-${i.toString()}`}\r\n        value={props.squares[i]} \r\n        onClick={() => props.onClick(i)}\r\n        onWin={props.onWin ? props.onWin.some(c => c === i) : null}\r\n      />\r\n    );\r\n  }\r\n  \r\n  let boardRow = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let row = [];\r\n    for (let j = i * 3; j < i * 3 + 3; j++) {\r\n      row.push(renderSquare(j));\r\n    }\r\n    boardRow.push(\r\n      <div className=\"board-row\" key={`row-${i}`}>\r\n        {row}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {boardRow}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from 'react';\r\nimport \"./Settings.jsx.css\"\r\n\r\nfunction Settings(props) {\r\n  const [state, setState] = useState({\r\n    gameMode: props.gameMode,\r\n    signMode: (props.playerSign === 'X' ? 1 : 0),\r\n  });\r\n\r\n  const modeSelectHandler = (mode) => {\r\n    const newState = {\r\n      gameMode: mode,\r\n      signMode: (mode ? 1 : state.signMode)\r\n    };\r\n    setState(newState);\r\n    return newState;\r\n  };\r\n\r\n  const signSelectHandler = (mode) => {\r\n    const newState = {signMode: mode};\r\n    setState(newState);\r\n    return newState;\r\n  };\r\n\r\n  const handleChange = (states) => {\r\n    props.onChange(\r\n      states.gameMode,\r\n      (states.signMode ? 'X' : 'O')\r\n    )\r\n  };\r\n  \r\n  return (\r\n    <div className=\"settings\">\r\n      <h2 className=\"message game-mode\">Pick game mode:</h2>\r\n      <div className=\"game-mode-select\">\r\n        <button \r\n          className={\r\n            `btn vs-human ${state.gameMode ? \"active\" : \"\"}`\r\n          }\r\n          onClick={() => handleChange(modeSelectHandler(1))}\r\n        >\r\n          Vs. Human\r\n        </button>\r\n        <button \r\n          className={\r\n            `btn vs-ai ${state.gameMode ? \"\" : \"active\"}`\r\n          }\r\n          onClick={() => handleChange(modeSelectHandler(0))}\r\n        >\r\n          Vs. AI\r\n        </button>\r\n      </div>\r\n      <div className={\r\n        `ai-mode-settings ${state.gameMode ? \"hidden\" : \"\"}`\r\n        }\r\n      >\r\n        <h2 className=\"message pick-sign\">Choose sign:</h2>\r\n        <div className=\"sign-select\">\r\n          <button \r\n            className={\r\n              `btn sign-x ${state.signMode ? \"active\" : \"\"}`\r\n            }\r\n            onClick={() => handleChange(signSelectHandler(1))}\r\n          >\r\n            X\r\n          </button>\r\n          <button \r\n            className={\r\n              `btn sign-o ${state.signMode ? \"\" : \"active\"}`\r\n            }\r\n            onClick={() => handleChange(signSelectHandler(0))}\r\n          >\r\n            O\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Settings;\r\n","class Player {\r\n  constructor(sign) {\r\n    this._sign = sign;\r\n  }\r\n\r\n  get getSign() {\r\n    return this._sign;\r\n  }\r\n\r\n  set setSign(sign) {\r\n    this._sign = sign;\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import Controller from \"./controller\";\r\n\r\nconst AIController = (() => {\r\n  let humanPlayerSign = 'X';\r\n  let aiPlayerSign = 'O';\r\n\r\n  const setCurrentPlayerSign = (sign) => {\r\n    humanPlayerSign = Controller.getHumanPlayer(sign);\r\n    aiPlayerSign = Controller.getAIPlayer(sign);\r\n  };\r\n\r\n  const minimax = (squares, playerSign) => {\r\n    \r\n    const availableMove = squares.filter(cell => !isNaN(cell));\r\n\r\n    if (Controller.checkWin(squares)) {\r\n\r\n      if (playerSign === humanPlayerSign) {\r\n        return {score: 10};\r\n      } else if (playerSign === aiPlayerSign) {\r\n        return {score: -10}; \r\n      };\r\n\r\n    } else if (availableMove.length === 0) {\r\n\r\n      return {score: 0};\r\n\r\n    };\r\n\r\n    let moves = [];\r\n    availableMove.forEach((spot) => {\r\n      let move = {};\r\n      move.index = spot;\r\n\r\n      squares[spot] = playerSign;\r\n\r\n      if (playerSign === aiPlayerSign) {\r\n        const result = minimax(squares, humanPlayerSign);\r\n        move.score = result.score;\r\n      } else {\r\n        const result = minimax(squares, aiPlayerSign);\r\n        move.score = result.score;\r\n      };\r\n\r\n      squares[spot] = move.index;\r\n      moves.push(move);\r\n    });\r\n\r\n    let bestMove;\r\n    if (playerSign === aiPlayerSign) {\r\n      let bestScore = -10000;\r\n      moves.forEach((move, index) => {\r\n        if (move.score > bestScore) {\r\n            bestScore = move.score;\r\n            bestMove = index;\r\n        };\r\n      });\r\n    } else {\r\n      let bestScore = 10000;\r\n      moves.forEach((move, index) => {\r\n        if (move.score < bestScore) {\r\n            bestScore = move.score;\r\n            bestMove = index;\r\n        };\r\n      });\r\n    };\r\n\r\n    return moves[bestMove];\r\n  };\r\n\r\n  return {\r\n    setCurrentPlayerSign,\r\n    minimax,\r\n  };\r\n\r\n})();\r\n\r\nexport default AIController;","import Player from \"./player\";\r\nimport AIController from \"./aiController\";\r\n\r\nconst Controller = (() => {\r\n  let _playerA = new Player('X');\r\n  let _playerB = new Player('O');\r\n\r\n  const _currentTurn = (gameState) => {\r\n    return gameState ? _playerA.getSign : _playerB.getSign;\r\n  };\r\n\r\n  const getHumanPlayer = (playerSign) => {\r\n    return (playerSign === 'X' ? _playerA.getSign : _playerB.getSign);\r\n  };\r\n\r\n  const getAIPlayer = (playerSign) => {\r\n    return (playerSign === 'X' ? _playerB.getSign : _playerA.getSign);\r\n  };\r\n\r\n  const checkWin = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n  \r\n    let winner = null;\r\n    lines.some((line) => {\r\n        const winCond = (\r\n          line.every(i => squares[i] === 'X') ||\r\n          line.every(i => squares[i] === 'O')\r\n        );\r\n  \r\n        if (winCond) winner = line;\r\n        return winCond;\r\n    });\r\n    return winner;\r\n  };\r\n\r\n  const checkDraw = (squares) => {\r\n    if (squares.some(cell => cell === null)) return false;\r\n    return true;\r\n  };\r\n\r\n  const moveStep = (state, idx) => {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (checkWin(squares) || squares[idx]) return false;\r\n    if (checkDraw(squares)) return false;\r\n\r\n    squares[idx] = _currentTurn(state.xIsNext);\r\n    const newState = {\r\n      history: history.concat([{\r\n        squares: squares,\r\n        moveIndex: idx,\r\n      }]),\r\n      stepNumber: history.length,\r\n      gameMode: state.gameMode,\r\n      playerSign: state.playerSign,\r\n      xIsNext: !state.xIsNext,\r\n    };\r\n\r\n    return newState;\r\n  };\r\n\r\n  const aiStep = (state) => {\r\n    if (state.xIsNext && state.playerSign === 'X') return;\r\n    const squares = state.history[state.history.length - 1].squares.slice();\r\n    const indexedSquares = squares.map((s, i) => {\r\n      if (s === null) s = i;\r\n      return s;\r\n    });\r\n\r\n    AIController.setCurrentPlayerSign(state.playerSign);\r\n    const moveIndex = AIController.minimax(\r\n      indexedSquares, getAIPlayer(state.playerSign)\r\n    ).index;\r\n\r\n    if (moveIndex === undefined) return;\r\n    const move = moveStep(state, moveIndex);\r\n    return move;\r\n  };\r\n\r\n  const getEmptySquares = (squares) => {\r\n    return squares.filter(s => s === null);\r\n  };\r\n\r\n  return {\r\n    checkWin,\r\n    checkDraw,\r\n    moveStep,\r\n    aiStep,\r\n    getEmptySquares,\r\n    getHumanPlayer,\r\n    getAIPlayer,\r\n  };\r\n\r\n})();\r\n\r\nexport default Controller;\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport Settings from './Settings';\r\nimport Controller from '../modules/controller';\r\nimport \"./App.jsx.css\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        moveIndex: 0,\r\n      }],\r\n      stepNumber: 0,\r\n      gameMode: 1,\r\n      playerSign: 'X',\r\n      xIsNext: true,\r\n    };\r\n\r\n    this.moveHandler = this.moveHandler.bind(this);\r\n    this.restartHandler = this.restartHandler.bind(this);\r\n    this.updateState = this.updateState.bind(this);\r\n  }\r\n\r\n  moveHandler(i) {\r\n    if (!this.state.xIsNext && \r\n        !this.state.gameMode &&\r\n        !this.state.playerSign === 'X') {\r\n      console.log(this.state);\r\n      return;\r\n    }\r\n\r\n    let newState = Controller.moveStep(this.state, i);\r\n    if (!newState) return;\r\n\r\n    if (!this.state.gameMode) {\r\n      const aiMove = Controller.aiStep(newState);\r\n      if (aiMove) Object.assign(newState, {...aiMove});\r\n    };\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  updateState(mode, sign) {\r\n    const newState = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        moveIndex: 0,\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      gameMode: mode,\r\n      playerSign: sign\r\n    };\r\n\r\n    if (!mode && sign === 'O') {\r\n      const aiMove = Controller.aiStep(newState);\r\n      Object.assign(newState, {...aiMove});\r\n    };\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  restartHandler() {\r\n    this.updateState(this.state.gameMode, this.state.playerSign);\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winningLine = Controller.checkWin(current.squares);\r\n\r\n    let status;\r\n    if (winningLine) {\r\n      const winner = current.squares[winningLine[0]];\r\n      status = (\r\n        `Winner: ${\r\n          this.state.gameMode ? \r\n          winner : (winner === this.state.playerSign ? \"Player\" : \"AI\")\r\n        }`\r\n      );\r\n    } else if (Controller.checkDraw(current.squares)) {\r\n      status = `Draw`;\r\n    } else {\r\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <Settings\r\n          gameMode={this.state.gameMode}\r\n          playerSign={this.state.playerSign}\r\n          onChange={this.updateState}\r\n        />\r\n        <div className=\"main-container\">\r\n          <div className=\"game-info\">\r\n            <div className=\"message current-mode\">Current Mode: Vs. {this.state.gameMode ? \"Human\" : \"AI\"}</div>\r\n            <div className=\"message game-message\">{status}</div>\r\n          </div>\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick={(i) => this.moveHandler(i)}\r\n              onWin={winningLine ? winningLine : null}\r\n            />\r\n          </div>\r\n          <div className=\"options\">\r\n            <button \r\n              className=\"btn restart-btn\"\r\n              onClick={() => this.restartHandler()}\r\n            >\r\n              Restart\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}